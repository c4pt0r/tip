name: Go Build and Releases

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*-stable'  # Trigger on tags like v1.2.3-stable
  schedule:
    - cron: '0 0 * * *'  # Nightly build at midnight UTC
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write  # Grant the workflow permission to write to repository contents

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
        go-version: [1.21.1]
        include:
          # Add a specific build for Raspberry Pi (ARM)
          - os: ubuntu-latest
            arch: arm
            go-version: 1.21.1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Build
        run: |
          # Set GOOS based on the runner OS
          if [ "${{ runner.os }}" == "Linux" ]; then
            GOOS=linux
          elif [ "${{ runner.os }}" == "macOS" ]; then
            GOOS=darwin
          else
            echo "Unsupported OS: ${{ runner.os }}"
            exit 1
          fi
          
          # Set version
          GIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}-${TIMESTAMP}-${GIT_HASH}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            VERSION="nightly-${TIMESTAMP}-${GIT_HASH}"
          else
            VERSION="${GIT_HASH}-${TIMESTAMP}"
          fi
          
          GOARCH=${{ matrix.arch }} go build -ldflags="-X 'main.Version=${VERSION}'" -o tidb-cli-${GOOS}-${{ matrix.arch }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tidb-cli-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.go-version }}
          path: tidb-cli-*

  nightly:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Update nightly tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -f nightly
          git push origin nightly -f
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current date
        id: date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Update or create nightly release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: nightly
          name: Nightly Build ${{ env.DATE }}
          draft: false
          prerelease: true
          files: artifacts/**/*
          body: |
            Nightly build generated on ${{ env.DATE }}.
            This release includes builds for Linux (amd64, arm64, arm), and macOS (amd64, arm64).
            
            This is a rolling release. The 'nightly' tag always points to the latest nightly build.
          update_existing: true  # This will update the existing release if it exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  stable-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '-stable')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create stable release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: artifacts/**/*
          body: |
            Stable release ${{ env.VERSION }}
            
            This release includes builds for Linux (amd64, arm64, arm), and macOS (amd64, arm64).
            
            For full changelog, please check the commit history.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
